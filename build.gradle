buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.source.formatter", version: "latest.release"
		classpath group: "de.undercouch", name: "gradle-download-task", version: "latest.release"
	}

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
}

apply plugin: "com.liferay.source.formatter"
apply plugin: "de.undercouch.download"
apply plugin: "java"

check.dependsOn checkSourceFormatting

formatSource {
	maxLineLength = 120
}

checkSourceFormatting {
	maxLineLength = 120
}

task buildWorkspaceInstallers
task buildWorkspaceLinux64(type:Exec)
task buildWorkspaceOSX(type:Exec)
task buildWorkspaceWindows(type:Exec)
task buildWorkspacewithDevStudioCEInstallers
task buildWorkspacewithDevStudioCELinux64(type:Exec)
task buildWorkspacewithDevStudioCEOSX(type:Exec)
task buildWorkspacewithDevStudioCEWindows(type:Exec)
task buildWorkspacewithDevStudioDXPInstallers
task buildWorkspacewithDevStudioDXPLinux64(type:Exec)
task buildWorkspacewithDevStudioDXPOSX(type:Exec)
task buildWorkspacewithDevStudioDXPWindows(type:Exec)
task deleteWorkspaceOsxApp(type: Delete)
task deleteWorkspacewithDevStudioCEOsxApp(type: Delete)
task deleteWorkspacewithDevStudioDXPOsxApp(type: Delete)
task downloadBlade(type: Download)
task downloadBND(type: Download)
task downloadBundleSupport(type: Download)
task downloadGW(type: Download)
task downloadJPM(type: Download)
task downloadStudioLinux(type: Download)
task downloadStudioMacosx(type: Download)
task downloadStudioWindows(type: Download)
task verifyBlade(type: Verify, dependsOn: downloadBlade)
task verifyBND(type: Verify, dependsOn: downloadBND)
task verifyBundleSupport(type: Verify, dependsOn: downloadBundleSupport)
task verifyGW(type: Verify, dependsOn: downloadGW)
task verifyJPM(type: Verify, dependsOn: downloadJPM)
task verifyStudioLinux(type: Verify, dependsOn: downloadStudioLinux)
task verifyStudioMacosx(type: Verify, dependsOn: downloadStudioMacosx)
task verifyStudioWindows(type: Verify, dependsOn: downloadStudioWindows)

downloadStudioLinux{
	src studioDownloadBase+'com.liferay.ide.studio-linux.gtk.x86_64.zip'
	dest "shared/download"
	onlyIfModified true
}

downloadStudioWindows{
	src studioDownloadBase+'com.liferay.ide.studio-win32.win32.x86_64.zip'
	dest "shared/download"
	onlyIfModified true
}

downloadStudioMacosx{
	src studioDownloadBase+'com.liferay.ide.studio-macosx.cocoa.x86_64.zip'
	dest "shared/download"
	onlyIfModified true
}

downloadBlade{
	src bladeLatestDownloadURL
	dest "shared/download/blade.jar"
	onlyIfModified true
}

downloadBND{
	src bndLatestDownloadURL
	dest "shared/download/biz.aQute.bnd.jar"
	onlyIfModified true
}

downloadBundleSupport{
	src bundleSupportDownloadBase + "/" + bundleSupportVersion + "/" + bundleSupportName
	dest "shared/download/com.liferay.portal.tools.bundle.support.jar"
	onlyIfModified true
}

downloadGW{
	src gwLatestDownloadURL
	dest "shared/download/gw.jar"
	onlyIfModified true
}

downloadJPM{
	src jpmcliLatestDownloadURL
	dest "shared/download/biz.aQute.jpm.run.jar"
	onlyIfModified true
}

verifyStudioLinux{
	src "shared/download/com.liferay.ide.studio-linux.gtk.x86_64.zip"
	algorithm "MD5"
	checksum studioLinuxLatestMD5
}

verifyStudioWindows{
	src "shared/download/com.liferay.ide.studio-win32.win32.x86_64.zip"
	algorithm "MD5"
	checksum studioWinLatestMD5
}

verifyStudioMacosx{
	src "shared/download/com.liferay.ide.studio-macosx.cocoa.x86_64.zip"
	algorithm "MD5"
	checksum studioMacLatestMD5
}
verifyBlade{
	src "shared/download/blade.jar"
	algorithm "MD5"
	checksum bladeLatestMD5
}

verifyBND{
	src "shared/download/biz.aQute.bnd.jar"
	algorithm "MD5"
	checksum bndLatestMD5
}

verifyBundleSupport{
	src "shared/download/com.liferay.portal.tools.bundle.support.jar"
	algorithm "MD5"
	checksum bundleSupportMD5
}

verifyGW{
	src "shared/download/gw.jar"
	algorithm "MD5"
	checksum gwLatestMD5
}

verifyJPM{
	src "shared/download/biz.aQute.jpm.run.jar"
	algorithm "MD5"
	checksum jpmcliLatestMD5
}

buildWorkspaceOSX{
	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace.xml', 'osx', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

deleteWorkspaceOsxApp{
	delete "./outputs/LiferayWorkspace-"+getTimestamp()+"-osx-installer.app"
}

deleteWorkspacewithDevStudioCEOsxApp{
	delete "./outputs/LiferayWorkspacewithDevStudioCommunityEdition-"+getTimestamp()+"-osx-installer.app"
}

deleteWorkspacewithDevStudioDXPOsxApp{
	delete "./outputs/LiferayWorkspacewithDevStudioDXP-"+getTimestamp()+"-osx-installer.app"
}

buildWorkspaceLinux64{
	dependsOn processResources

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace.xml', 'linux-x64', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspaceWindows{
	dependsOn processResources

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace.xml', 'windows', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspacewithDevStudioCEOSX{
	dependsOn processResources, verifyStudioMacosx

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace-with-devstudio-ce.xml', 'osx', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspacewithDevStudioCELinux64{
	dependsOn processResources, verifyStudioLinux

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace-with-devstudio-ce.xml', 'linux-x64', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspacewithDevStudioCEWindows{
	dependsOn processResources, verifyStudioWindows

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace-with-devstudio-ce.xml', 'windows', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspacewithDevStudioDXPOSX{
	dependsOn processResources, verifyStudioMacosx

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace-with-devstudio-dxp.xml', 'osx', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspacewithDevStudioDXPLinux64{
	dependsOn processResources, verifyStudioLinux

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace-with-devstudio-dxp.xml', 'linux-x64', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

buildWorkspacewithDevStudioDXPWindows{
	dependsOn processResources, verifyStudioMacosx

	def command = [installBuilderHome + '/bin/builder', 'build', './installers/liferay-workspace-with-devstudio-dxp.xml', 'windows', '--setvars', 'project.version='+getTimestamp()]

	commandLine command
}

def getTimestamp() {
	return new Date().format('yyyyMMddHHmmss')
}

build {
	dependsOn buildWorkspaceInstallers, buildWorkspacewithDevStudioCEInstallers, buildWorkspacewithDevStudioDXPInstallers
}

buildWorkspaceInstallers{
	dependsOn buildWorkspaceOSX, buildWorkspaceLinux64, buildWorkspaceWindows, deleteWorkspaceOsxApp
}

buildWorkspacewithDevStudioCEInstallers{
	dependsOn buildWorkspacewithDevStudioCEOSX, buildWorkspacewithDevStudioCELinux64, buildWorkspacewithDevStudioCEWindows, deleteWorkspacewithDevStudioCEOsxApp
}

buildWorkspacewithDevStudioDXPInstallers{
	dependsOn buildWorkspacewithDevStudioDXPOSX, buildWorkspacewithDevStudioDXPLinux64, buildWorkspacewithDevStudioDXPWindows, deleteWorkspacewithDevStudioDXPOsxApp
}

clean {
	delete "./outputs"
}

dependencies {
	testCompile group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.3.1"
	testCompile group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.3.1"
}

processResources {
	dependsOn verifyBlade, verifyBND, verifyBundleSupport, verifyGW, verifyJPM
}

repositories {
	maven {
		url "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}
}